<?php

/**
 * @file
 * The functions in this module are for Menus.
 *
 * The Everyday Tools module was created to house functions that are useful
 * in every Drupal build that requires some degree of development.
 */

/**
 * Implements hook_menu().
 */
function everyday_tools_menu_menu() {

  $items = array();

  $items['admin/config/everyday-tools/menu'] = array(
    'title' => 'Everyday Tools Menu',
    'description' => 'Everyday Tools Menu',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('everyday_tools_menu_form'),
    'access arguments' => array('access everyday_tools administration pages'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Create Configuration Form.
 * 
 * @return array
 *   The system setting form.
 */
function everyday_tools_menu_form() {
  $form['#submit'] = array('everyday_tools_menu_form_submit');
  $form['intro'] = array(
    '#markup' => '<h1>' . t('Configuration options for Everyday Tools Menu.') . '</h1>',
  );
  $form["everyday_tools_menu_cache_time"] = array(
    "#type" => "select",
    "#title" => t("Please the length of time to cache the menu for."),
    "#default_value" => variable_get("everyday_tools_menu_cache_time", 1800),
    "#options" => array(
      0 => t("No Cache"),
      900 => t("15 minutes"),
      1800 => t("30 minutes"),
      3600 => t("1 hour"),
      7200 => t("2 hours"),
      14400 => t("4 hours"),
      28800 => t("8 hours"),
      43200 => t("12 hours"),
      57600 => t("16 hours"),
      86400 => t("24 hours"),
    ),
  );
  return system_settings_form($form);
}

/**
 * Submit function for administration form.
 * 
 * @param array $form
 *   The page form.
 * @param array $form_state
 *   The current form state.
 */
function everyday_tools_menu_form_submit($form, &$form_state) {
}

/**
 * Submit function for administration form.
 * 
 * @param array $form
 *   The page form.
 * @param array $form_state
 *   The current form state.
 */
function everyday_tools_menu_form_validate($form, &$form_state) {
  if (isset($form_state['values']['everyday_tools_menu_cache_time']) && !is_numeric($form_state['values']['everyday_tools_menu_cache_time'])) {
    form_set_error('everyday_tools_menu_cache_time', t('You must enter an integer for the maximum number of links.'));
  }
}

/**
 * Returns a mlid for a given page from the given menu. 
 * 
 * This can be useful for finding information about the menu item or finding
 * its child pages.
 * 
 * NOTE: this function will only return the first occurance of the item
 * in the menu.
 *
 * @param string $path
 *   The Drupal path to the page
 * @param string $menu
 *   Optional - The menu to search
 * 
 * @return int|FALSE
 *   If found will return the mlid
 */
function everyday_tools_menu_get_mlid($path, $menu = 'main-menu') {
  $mlid = NULL;

  $query = db_select('menu_links', 'ml');
  $query->condition('ml.link_path', $path, '=')
        ->condition('ml.menu_name', $menu, '=')
        ->fields('ml', array('mlid'));

  $result = $query->execute()->fetchCol();
  if ($result) {
    $mlid = $result[0];
  }

  return $mlid;
}

/**
 * Finds the mlid in the given menu.
 *
 * @param int $mlid
 *   The menu ID to check against
 * @param array $link
 *   Link array to check if it is the current page
 *
 * @return array|NULL
 *   Once found, returns the $link array.
 */
function everyday_tools_menu_find_mlid_in_menu($mlid, $link) {
  if ($mlid == $link['link']['mlid']) {
    return $link;
  }
  else {
    foreach ($link['below'] as $k => $item) {
      $response = everyday_tools_menu_find_mlid_in_menu($mlid, $item);
      if ($response) {
        return $response;
      }
    }
  }
}

/**
 * Returns an array of the child pages of the given mlid.
 * 
 * Use get_mlid() to get the mlid to search from. This function is useful for
 * landing pages etc.
 *
 * @param int $mlid
 *   The menu link id, probably from get_mlid()
 * @param string $menu
 *   Optional - The menu to search
 *
 * @return array
 *   An array of children for the menu item
 */
function everyday_tools_menu_get_menu_children($mlid, $menu = 'main-menu') {
  $tree = menu_tree_all_data($menu);
  $children = array();
  if ($mlid) {
    foreach ($tree as $branch) {
      $check = everyday_tools_menu_find_mlid_in_menu($mlid, $branch);

      if ($check) {
        $branch = $check;
        foreach ($branch['below'] as $twig) {
          $alias = everyday_tools_url_parts($twig['link']['link_path']);
          if ($alias[0] == 'node') {
            $n = node_load($alias[1]);
            $children[$n->title . ':' . $n->nid] = $n;
          }
        }

        ksort($children);
      }
    }
  }

  return $children;
}

/**
 * Helper function for get_menu_children().
 * 
 * This function will recursively search a menu, this function should not be
 * called directly.
 *
 * @param int $mlid
 *   The menu link id
 * @param array $link
 *   The menu tree item
 *
 * @return array|NULL
 *   Will return an array if it finds the item, else will return NULL
 */
function _everyday_tools_menu_find_mlid_in_menu($mlid, $link) {
  if ($mlid == $link['link']['mlid']) {
    return $link;
  }
  else {
    foreach ($link['below'] as $k => $item) {
      $response = everyday_tools_menu_find_mlid_in_menu($mlid, $item);
      if ($response) {
        return $response;
      }
    }
  }
}

/**
 * Returns a clean and simple array of the items in a menu, no mess, no fuss.
 *
 * @param string $menu
 *   Optional - The menu to return
 *
 * @return array
 *   The clean menu array
 */
function everyday_tools_menu_get_clean_menu($menu = 'main-menu') {
  // If i18n is installed, get the language for the cache key.
  $langcode = module_exists('i18n') ? '_' . i18n_langcode() : '';

  // Setup the caching.
  $cache_key = 'everyday_tools_menu_cache_' . $menu . $langcode;

  // Setup / access the cache. This is set to RAM cache.
  $memcache_connection = everyday_tools_memcache_connect();
  // Get cached item if exists, otherwise set it.
  if (module_exists('everyday_tools_memcache') && $memcache_connection !== FALSE) {
    // Attempt to get array of all the terms.
    $menu_clean_data = everyday_tools_memcache_get($memcache_connection, $cache_key);
    if (isset($menu_clean_data['value'])) {
      $menu_clean = $menu_clean_data['value'];
    }
    else {
      $menu_clean = FALSE;
    }
  }
  else {
    $memcache_connection = FALSE;
    if ($cached = cache_get($cache_key, 'cache')) {
      $menu_clean = $cached->data;
    }
  }

  // Return Menu if it is set.
  if (isset($menu_clean) && $menu_clean !== FALSE) {
    return $menu_clean;
  }

  $menu = menu_tree_all_data($menu);
  if ($menu) {
    $menu_clean = array();
    foreach ($menu as $item) {
      if (array_key_exists('link', $item) && $item['link']['hidden'] == 0) {
        $menu_clean[] = everyday_tools_menu_get_clean_menu_item($item);
      }
    }

    if ($menu_clean) {
      $cache_time = variable_get('everyday_tools_menu_cache_time');
      // Set menu in the cache.
      if ($cache_time != 0) {
        if ($memcache_connection !== FALSE) {
          everyday_tools_memcache_set($memcache_connection, $cache_key, $menu_clean);
        }
        else {
          cache_set($cache_key, $menu_clean, 'cache', variable_get('everyday_tools_menu_cache_time', 1800));
        }
      }
      return $menu_clean;
    }
  }

  return FALSE;
}

/**
 * Helper function for get_clean_menu().
 *
 * This function should not be called directly.
 *
 * @param array $item
 *   The menu tree item
 * 
 * @return array
 *   The clean menu item array
 */
function everyday_tools_menu_get_clean_menu_item($item) {
  if (array_key_exists('link', $item)) {
    $link = array(
      'title' => $item['link']['link_title'],
      'path' => $item['link']['link_path'],
      'alias' => drupal_get_path_alias($item['link']['link_path']),
      'language' => (isset($item['link']['language'])) ? $item['link']['language'] : language_default(),
      'children' => array(),
    );

    if (array_key_exists('below', $item)) {
      foreach ($item['below'] as $child) {
        $link['children'][] = everyday_tools_menu_get_clean_menu_item($child);
      }
    }

    return $link;
  }
}